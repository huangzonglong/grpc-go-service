// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protoc/pubsub.proto

package pubsub

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Identity struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Identity) Reset()         { *m = Identity{} }
func (m *Identity) String() string { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()    {}
func (*Identity) Descriptor() ([]byte, []int) {
	return fileDescriptor_b12ede2cf6391c2b, []int{0}
}

func (m *Identity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identity.Unmarshal(m, b)
}
func (m *Identity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identity.Marshal(b, m, deterministic)
}
func (m *Identity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identity.Merge(m, src)
}
func (m *Identity) XXX_Size() int {
	return xxx_messageInfo_Identity.Size(m)
}
func (m *Identity) XXX_DiscardUnknown() {
	xxx_messageInfo_Identity.DiscardUnknown(m)
}

var xxx_messageInfo_Identity proto.InternalMessageInfo

func (m *Identity) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type Message struct {
	Payload              string   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	DataType             string   `protobuf:"bytes,2,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Topic                string   `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_b12ede2cf6391c2b, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Message) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *Message) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type PublishRequest struct {
	Topic                string     `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Messages             []*Message `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b12ede2cf6391c2b, []int{2}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type PublishResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b12ede2cf6391c2b, []int{3}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type SubscribeRequest struct {
	Identity             *Identity     `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Subscription         *Subscription `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b12ede2cf6391c2b, []int{4}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetIdentity() *Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *SubscribeRequest) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

type Subscription struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_b12ede2cf6391c2b, []int{5}
}

func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription.Unmarshal(m, b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return xxx_messageInfo_Subscription.Size(m)
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func init() {
	proto.RegisterType((*Identity)(nil), "pubsub.Identity")
	proto.RegisterType((*Message)(nil), "pubsub.Message")
	proto.RegisterType((*PublishRequest)(nil), "pubsub.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "pubsub.PublishResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "pubsub.SubscribeRequest")
	proto.RegisterType((*Subscription)(nil), "pubsub.Subscription")
}

func init() { proto.RegisterFile("protoc/pubsub.proto", fileDescriptor_b12ede2cf6391c2b) }

var fileDescriptor_b12ede2cf6391c2b = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4d, 0x4f, 0x83, 0x40,
	0x14, 0x2c, 0xad, 0x52, 0xfa, 0x68, 0x6c, 0xf3, 0x6c, 0x2a, 0xe1, 0xd4, 0x6c, 0x8c, 0xa9, 0x51,
	0xab, 0xc1, 0x8b, 0x07, 0x8d, 0xe7, 0x1e, 0x4c, 0x1a, 0xb0, 0x3f, 0x80, 0xa5, 0x1b, 0xdd, 0x04,
	0x61, 0xed, 0xee, 0x1e, 0xea, 0xff, 0xf6, 0x6e, 0x04, 0x16, 0xe9, 0xc7, 0xcd, 0xe3, 0xf0, 0x86,
	0x99, 0x79, 0x6f, 0x16, 0x4e, 0xc5, 0x3a, 0x57, 0x79, 0x72, 0x2b, 0x34, 0x95, 0x9a, 0xce, 0x0a,
	0x84, 0x76, 0x89, 0xc8, 0x05, 0x38, 0xf3, 0x15, 0xcb, 0x14, 0x57, 0x1b, 0xf4, 0xc1, 0x49, 0x52,
	0xce, 0x32, 0x35, 0x5f, 0x79, 0xd6, 0xc4, 0x9a, 0xf6, 0xc2, 0x1a, 0x93, 0x25, 0x74, 0x5f, 0x98,
	0x94, 0xf1, 0x1b, 0x43, 0x0f, 0xba, 0x22, 0xde, 0xa4, 0x79, 0x6c, 0x58, 0x06, 0xfe, 0x0a, 0xac,
	0x62, 0x15, 0xbf, 0x6e, 0x04, 0xf3, 0xda, 0xa5, 0x80, 0xc1, 0x38, 0x82, 0x63, 0x95, 0x0b, 0x9e,
	0x78, 0x9d, 0x62, 0x50, 0x02, 0x12, 0xc1, 0xc9, 0x42, 0xd3, 0x94, 0xcb, 0xf7, 0x90, 0x7d, 0x6a,
	0x26, 0xd5, 0x1f, 0xcf, 0x6a, 0xf0, 0xf0, 0x0a, 0x9c, 0x8f, 0xd2, 0x5e, 0x7a, 0xed, 0x49, 0x67,
	0xea, 0x06, 0x83, 0x59, 0xb5, 0x4f, 0x15, 0x2b, 0xac, 0x09, 0xe4, 0x12, 0x06, 0xb5, 0xa8, 0x14,
	0x79, 0x26, 0x19, 0x8e, 0xc1, 0x5e, 0x33, 0xa9, 0x53, 0x55, 0xc9, 0x56, 0x88, 0x7c, 0xc1, 0x30,
	0xd2, 0x54, 0x26, 0x6b, 0x4e, 0x99, 0x49, 0x70, 0x0d, 0x0e, 0xaf, 0x4e, 0x52, 0xb0, 0xdd, 0x60,
	0x68, 0xbc, 0xcc, 0xa9, 0xc2, 0x9a, 0x81, 0x0f, 0xd0, 0x97, 0xa5, 0x82, 0x50, 0x3c, 0xcf, 0x8a,
	0xbd, 0xdd, 0x60, 0x64, 0xfe, 0x88, 0x1a, 0xb3, 0x70, 0x8b, 0x49, 0xce, 0xa1, 0xdf, 0x9c, 0x1e,
	0xde, 0x3c, 0xf8, 0xb6, 0xc0, 0x5e, 0x68, 0x1a, 0x69, 0x8a, 0x4f, 0xd0, 0xab, 0xc3, 0xa2, 0xb7,
	0xe3, 0x50, 0xe7, 0xf7, 0x0f, 0x7a, 0x93, 0x16, 0x3e, 0x83, 0xbb, 0xcc, 0xe4, 0x3f, 0x04, 0x6e,
	0xe0, 0x68, 0xa1, 0xd3, 0x14, 0xf7, 0xce, 0xe1, 0xef, 0x96, 0x41, 0x5a, 0x77, 0x16, 0x3e, 0x42,
	0xb7, 0xaa, 0x01, 0xc7, 0x66, 0xbe, 0x5d, 0xb6, 0x7f, 0xb6, 0xf7, 0xbd, 0xec, 0x8b, 0xb4, 0xa8,
	0x5d, 0xbc, 0xd3, 0xfb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x78, 0x98, 0x02, 0xbe, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubSubClient is the client API for PubSub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*Subscription, error)
	Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*Subscription, error)
	Pull(ctx context.Context, in *Identity, opts ...grpc.CallOption) (PubSub_PullClient, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type pubSubClient struct {
	cc *grpc.ClientConn
}

func NewPubSubClient(cc *grpc.ClientConn) PubSubClient {
	return &pubSubClient{cc}
}

func (c *pubSubClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/pubsub.PubSub/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubClient) Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/pubsub.PubSub/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubClient) Pull(ctx context.Context, in *Identity, opts ...grpc.CallOption) (PubSub_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSub_serviceDesc.Streams[0], "/pubsub.PubSub/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSub_PullClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type pubSubPullClient struct {
	grpc.ClientStream
}

func (x *pubSubPullClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubSubClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/pubsub.PubSub/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubSubServer is the server API for PubSub service.
type PubSubServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*Subscription, error)
	Unsubscribe(context.Context, *SubscribeRequest) (*Subscription, error)
	Pull(*Identity, PubSub_PullServer) error
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
}

// UnimplementedPubSubServer can be embedded to have forward compatible implementations.
type UnimplementedPubSubServer struct {
}

func (*UnimplementedPubSubServer) Subscribe(ctx context.Context, req *SubscribeRequest) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedPubSubServer) Unsubscribe(ctx context.Context, req *SubscribeRequest) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (*UnimplementedPubSubServer) Pull(req *Identity, srv PubSub_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedPubSubServer) Publish(ctx context.Context, req *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterPubSubServer(s *grpc.Server, srv PubSubServer) {
	s.RegisterService(&_PubSub_serviceDesc, srv)
}

func _PubSub_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.PubSub/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSub_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.PubSub/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).Unsubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSub_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServer).Pull(m, &pubSubPullServer{stream})
}

type PubSub_PullServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type pubSubPullServer struct {
	grpc.ServerStream
}

func (x *pubSubPullServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _PubSub_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.PubSub/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PubSub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.PubSub",
	HandlerType: (*PubSubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _PubSub_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _PubSub_Unsubscribe_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _PubSub_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _PubSub_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protoc/pubsub.proto",
}
